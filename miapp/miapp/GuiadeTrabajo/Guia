

Quieres desarrollar una aplicación de gestión de usuarios con un frontend y un backend. 
Solicitaste orientación sobre cómo configurar el entorno de desarrollo, desarrollar el backend 
utilizando Spring Boot, crear el frontend utilizando JavaScript, integrar el frontend con el 
backend y realizar pruebas unitarias. Te proporcioné instrucciones detalladas para cada paso, 
incluyendo la configuración del entorno, la estructura del proyecto, el desarrollo de entidades, 
controladores y servicios, así como el desarrollo del frontend con JavaScript, la integración CORS y 
las pruebas unitarias con JUnit y Mockito.










1. Planificación del Proyecto
Antes de comenzar con el código, define los requisitos y funcionalidades principales de tu aplicación. Supongamos que queremos crear una aplicación de gestión de usuarios.

2. Configuración del Entorno de Desarrollo

Instalar JDK y Eclipse: Asegúrate de tener instalado JDK 8 o superior y Eclipse IDE for Java Developers.
Instalar Spring Tools Suite (STS):
En Eclipse, ve a Help > Eclipse Marketplace.
Busca "Spring Tools" y haz clic en "Go".
Instala "Spring Tools 4 (aka Spring Tool Suite 4)".
3. Desarrollo del Backend con Spring Boot

Crear un Nuevo Proyecto Spring Boot:
En Eclipse, ve a File > New > Other.
Selecciona Spring Starter Project y haz clic en Next.
Configura el nombre del proyecto y selecciona las dependencias: Spring Web, Spring Data JPA, MySQL Driver (o la base de datos que vayas a usar).

//////aaron empieza desde aqui hacia abajo.///////

Estructura del Proyecto:
El proyecto estará estructurado en diferentes paquetes: domain, dto, repository, service, y controller.


La base de datos la creamos con sqldeveloper(lo podemos hacer juntos si quieres)



Configuración de la Base de Datos:
En src/main/resources/application.properties, añade la configuración de la base de datos.
properties
Copiar código
spring.datasource.url=jdbc:mysql://localhost:3306/mydatabase
spring.datasource.username=root
spring.datasource.password=yourpassword
spring.jpa.hibernate.ddl-auto=update
Domain:

java
Copiar código
package com.example.myapp.domain;

import javax.persistence.*;

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;

    // Getters and Setters
}
DTO (Data Transfer Object):

java
Copiar código
package com.example.myapp.dto;

public class UserDTO {
    private Long id;
    private String name;
    private String email;

    // Getters and Setters
}
Repository:

java
Copiar código
package com.example.myapp.repository;

import com.example.myapp.domain.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
}
Service:

java
Copiar código
package com.example.myapp.service;

import com.example.myapp.domain.User;
import com.example.myapp.dto.UserDTO;
import com.example.myapp.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    public List<UserDTO> getAllUsers() {
        return userRepository.findAll().stream()
                .map(user -> new UserDTO(user.getId(), user.getName(), user.getEmail()))
                .collect(Collectors.toList());
    }

    public UserDTO saveUser(UserDTO userDTO) {
        User user = new User();
        user.setName(userDTO.getName());
        user.setEmail(userDTO.getEmail());
        User savedUser = userRepository.save(user);
        return new UserDTO(savedUser.getId(), savedUser.getName(), savedUser.getEmail());
    }
}
Controller:

java
Copiar código
package com.example.myapp.controller;

import com.example.myapp.dto.UserDTO;
import com.example.myapp.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserController {
    @Autowired
    private UserService userService;

    @GetMapping
    public List<UserDTO> getAllUsers() {
        return userService.getAllUsers();
    }

    @PostMapping
    public UserDTO createUser(@RequestBody UserDTO userDTO) {
        return userService.saveUser(userDTO);
    }
}
4. Desarrollo del Frontend con JavaScript

Configuración Inicial:
Crea un nuevo archivo HTML y copia el siguiente código:
html
Copiar código
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management App</title>
</head>
<body>
    <h1>User Management App</h1>
    <button id="fetchUsersBtn">Fetch Users</button>
    <div id="userList"></div>

    <script>
        document.getElementById('fetchUsersBtn').addEventListener('click', fetchUsers);

        function fetchUsers() {
            fetch('http://localhost:8080/api/users')
                .then(response => response.json())
                .then(users => {
                    const userList = document.getElementById('userList');
                    userList.innerHTML = ''; // Clear previous content

                    users.forEach(user => {
                        const userItem = document.createElement('div');
                        userItem.textContent = `${user.name} - ${user.email}`;
                        userList.appendChild(userItem);
                    });
                })
                .catch(error => {
                    console.error('Error fetching users:', error);
                });
        }
    </script>
</body>
</html>
Este código HTML y JavaScript crea una página web simple con un botón para obtener usuarios y una lista para mostrarlos. Al hacer clic en el botón "Fetch Users", se realiza una solicitud GET a la API REST del backend para obtener la lista de usuarios y se muestra en la página.

Asegúrate de que la URL en la función fetch() coincida con la ruta de tu backend, que en este caso es http://localhost:8080/api/users.

5. Integración del Frontend con el Backend

Configuración CORS en Spring Boot:
Crea una clase de configuración en tu proyecto Spring Boot para permitir CORS.
java
Copiar código
package com.example.myapp.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig {
    @Bean
    public WebMvcConfigurer corsConfigurer() {
        return new WebMvcConfigurer() {
            @Override
            public void addCorsMappings(CorsRegistry registry) {
                registry.addMapping("/api/**")
                        .allowedOrigins("http://localhost:3000")
                        .allowedMethods("GET", "POST", "PUT", "DELETE")
                        .allowedHeaders("*")
                        .allowCredentials(true);
            }
        };
    }
}
6. Pruebas y Depuración

Pruebas Unitarias con JUnit y Mockito:
Utiliza JUnit y Mockito para escribir pruebas unitarias para tus servicios.
java
Copiar código
package com.example.myapp.service;

import com.example.myapp.domain.User;
import com.example.myapp.repository.UserRepository;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Collections;
import





